import java.io.*;
import nanovm.avr.*;
import nanovm.wkpf.*;
import nanovm.lang.Math;

public class TmpWKPF {

    // =========== Begin: Generated by the translator from application WuML
    /* Component instance IDs to indexes:
    Threshold => 0
    Light_Sensor => 1
    Numeric_Controller => 2
    Light_Actuator => 3
    */

    //link table
    // fromInstanceIndex(2 bytes), fromPropertyId(1 byte), toInstanceIndex(2 bytes), toPropertyId(1 byte), toWuClassId(2 bytes)
    //eg. (byte)0,(byte)0, (byte)0, (byte)2,(byte)0, (byte)1, (byte)1,(byte)0
    private final static byte[] linkDefinitions = {
        // Note: Component instance id and wuclass id are little endian
        // Note: using WKPF constants now, but this should be generated as literal bytes by the WuML->Java compiler.
        // Connect input controller to threshold
            (byte)0, (byte)0, (byte)3, (byte)3, (byte)0, (byte)0, (byte)4, (byte)0,
            (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)2, (byte)1, (byte)0,
            (byte)2, (byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)1, (byte)0
    };

    //component node id and port number table
    // each row corresponds to the component index mapped from component ID above
    // each row has two items: node id, port number
    private final static byte[][] componentInstanceToWuObjectAddrMap = {
        new byte[] {6, 1},
        new byte[] {6, 2},
        new byte[] {6, 3},
        new byte[] {2, 1, 4, 1}
    };

    private final static byte[][] heartbeatToNodeAddrMap = {
      new byte[]{
        2,
        4,
        6
      },
    };

    private final static int[] heartbeatGroupPeriods = {
      1,
    };
    // =========== End: Generated by the translator from application WuML

    public static void main (String[] args) {
        System.out.println("TmpWKPF");
        WKPF.loadHeartbeatToNodeAddrMap(heartbeatToNodeAddrMap);
        WKPF.loadHeartbeatPeriods(heartbeatGroupPeriods);
        WKPF.loadComponentToWuObjectAddrMap(componentInstanceToWuObjectAddrMap);
        WKPF.loadLinkDefinitions(linkDefinitions);
        initialiseLocalWuObjects();

        while(true){
            VirtualWuObject wuclass = WKPF.select();
            if (wuclass != null) {
                wuclass.update();
            }
        }
    }

    private static void initialiseLocalWuObjects() {

        if (WKPF.isLocalComponent((short)0)) {
        WKPF.createWuObject((short)WKPF.WUCLASS_THRESHOLD, WKPF.getPortNumberForComponent((short)0), null);
        WKPF.setPropertyShort((short)0, WKPF.PROPERTY_THRESHOLD_OPERATOR, WKPF.ENUM_THRESHOLD_OPERATOR_LT);
        WKPF.setPropertyShort((short)0, WKPF.PROPERTY_THRESHOLD_THRESHOLD, (short)30);
        WKPF.setPropertyShort((short)0, WKPF.PROPERTY_THRESHOLD_VALUE, (short)20);
        WKPF.setPropertyBoolean((short)0, WKPF.PROPERTY_THRESHOLD_OUTPUT, false);
        }

        if (WKPF.isLocalComponent((short)1)) {
        // Native WuClasses (C)
        WKPF.createWuObject((short)WKPF.WUCLASS_LIGHT_SENSOR, WKPF.getPortNumberForComponent((short)1), null);
        WKPF.setPropertyRefreshRate((short)1, WKPF.PROPERTY_LIGHT_SENSOR_REFRESH_RATE, (short)100);
        }

        if (WKPF.isLocalComponent((short)2)) {
        // Native WuClasses (C)
        WKPF.createWuObject((short)WKPF.WUCLASS_NUMERIC_CONTROLLER, WKPF.getPortNumberForComponent((short)2), null);WKPF.setPropertyShort((short)2, WKPF.PROPERTY_NUMERIC_CONTROLLER_OUTPUT, (short)200);
        }

        if (WKPF.isLocalComponent((short)3)) {
        // Native WuClasses (C)
        WKPF.createWuObject((short)WKPF.WUCLASS_LIGHT_ACTUATOR, WKPF.getPortNumberForComponent((short)3), null);WKPF.setPropertyBoolean((short)3, WKPF.PROPERTY_LIGHT_ACTUATOR_ON_OFF, false);
        }
    }
}
